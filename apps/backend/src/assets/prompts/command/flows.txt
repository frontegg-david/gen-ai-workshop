# Add a new user if not exists

1. Go to '/'
2. Wait for 1000 milliseconds
3. Focus on '[data-testid="nav_users_page"]'
4. Click on '[data-testid="nav_users_page"]'
5. Focus on '[data-testid="add_user_button"]'
6. Click on '[data-testid="add_user_button"]'
7. Focus on '[data-testid="full_name"]'
8. Fill 'Elsa Mueller' in '[data-testid="full_name"]'
9. Focus on '[data-testid="email"]'
10. Fill 'ElsaMueller.Daniel@hotmail.com' in '[data-testid="email"]'
11. Focus on '[data-testid="submit_button"]'
12. Click on '[data-testid="submit_button"]'
13. Focus on '[data-testid="users_table"]'

## Flow
Action Flow:

1. Generate a random full name using faker.person.fullName().
2. Generate a random email using faker.internet.email() with the first name as fullName.
3. Check if the user with the generated email already exists using isUserExists(email).
4. If the userExists is true, throw an error stating that the user already exists with the email.
5. If the userExists is false, perform the following actions:
   - Go to the home page ("/").
   - Wait for 1000 milliseconds.
   - Focus on the element with the test ID "nav_users_page".
   - Click on the element with the test ID "nav_users_page".
   - Focus on the element with the test ID "add_user_button".
   - Click on the element with the test ID "add_user_button".
   - Focus on the element with the test ID "full_name".
   - Fill the element with the test ID "full_name" with the generated full name.
   - Focus on the element with the test ID "email".
   - Fill the element with the test ID "email" with the generated email.
   - Focus on the element with the test ID "submit_button".
   - Click on the element with the test ID "submit_button".
   - Focus on the element with the test ID "users_table".

Note: The mentioned element test IDs are not mentioned in the code, but assuming they exist in the HTML template of the page.

## Code
import { test } from '@playwright/test';
import { faker } from '@faker-js/faker';
import { isUserExists } from './helpers'

test('Add a new user if not exists', async ({ page }) => {

  const fullName = faker.person.fullName()
  const email = faker.internet.email({ firstName: fullName })
  const userExists = await isUserExists(email)
  if (userExists) {
    throw new Error(`user already ${email} exists`)
  } else {
    await page.goto('/');
    await page.waitForTimeout(1000);

    await page.getByTestId('nav_users_page').focus()
    await page.getByTestId('nav_users_page').click()

    await page.getByTestId('add_user_button').focus()
    await page.getByTestId('add_user_button').click()

    await page.getByTestId('full_name').focus()
    await page.getByTestId('full_name').fill(fullName)

    await page.getByTestId('email').focus()
    await page.getByTestId('email').fill(email)

    await page.getByTestId('submit_button').focus()
    await page.getByTestId('submit_button').click()

    await page.getByTestId('users_table').focus()
  }
})


---

# should show all users

1. Go to "/"
2. Wait for 1000 milliseconds
3. Focus on element with data-testid "nav_users_page"
4. Click on element with data-testid "nav_users_page"
5. Focus on element with data-testid "users_table"

## Flow
Action flow for the code:

1. Import the 'expect' and 'test' modules from the '@playwright/test' package.
2. Define a test function called 'should show all users' that accepts a 'page' argument.
3. Inside the test function:
   - Go to the root page ('/')
   - Wait for 1 second
   - Focus on the element with the test ID 'nav_users_page'
   - Click on the element with the test ID 'nav_users_page'
   - Focus on the element with the test ID 'users_table'
   - Count the number of rows in the table with the test ID 'users_table' and assign it to the variable 'usersRows'
   - Assert that the value of 'usersRows' is equal to 40 using the 'expect' function.

Note: The code is using non-standard HTML entities for characters like single quotes and arrow symbols.

## Code
import { expect, test } from '@playwright/test';

test('should show all users', async ({ page }) => {

  await page.goto('/');
  await page.waitForTimeout(1000);

  await page.getByTestId('nav_users_page').focus()
  await page.getByTestId('nav_users_page').click()

  await page.getByTestId('users_table').focus()
  const usersRows = await page.getByTestId('users_table').locator('tbody tr').count();

  expect(usersRows).toBe(40)
})


